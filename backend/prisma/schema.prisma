generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64", "linux-arm64-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x"]
}

generator typescriptInterfaces {
  provider = "prisma-generator-typescript-interfaces"
  output   = "../src/types/prisma.d.ts"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Brand {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now()) @db.DateTime(0)
  updated_at DateTime  @updatedAt
  deleted_at DateTime? @db.DateTime(0)
  name       String    @db.VarChar(255)
  products   Product[]
}

model Building {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now()) @db.DateTime(0)
  updated_at DateTime  @updatedAt
  deleted_at DateTime? @db.DateTime(0)
  name       String    @db.VarChar(255)
  zones      Zone[]
}

model Category {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now()) @db.DateTime(0)
  updated_at DateTime  @updatedAt
  deleted_at DateTime? @db.DateTime(0)
  name       String    @db.VarChar(255)
  products   Product[]
}

model Item {
  id                  Int              @id @default(autoincrement())
  created_at          DateTime         @default(now()) @db.DateTime(0)
  updated_at          DateTime         @updatedAt
  deleted_at          DateTime?        @db.DateTime(0)
  storage_location_id Int?
  product_status_id   Int?
  product_id          Int
  description         String?          @db.LongText
  barcode_number      Int?
  product             Product          @relation(fields: [product_id], references: [id], map: "product_id_fk")
  product_status      ProductStatus?   @relation(fields: [product_status_id], references: [id], map: "product_status_id_fk")
  storage_location    StorageLocation? @relation(fields: [storage_location_id], references: [id], map: "storage_location_id_fk")
  item_in_loans       ItemInLoan[]

  @@index([storage_location_id], map: "items_ibfk_1")
  @@index([product_id], map: "product_id")
  @@index([product_status_id], map: "product_status_id")
}

model ItemInLoan {
  id          Int       @id @default(autoincrement())
  created_at  DateTime  @default(now()) @db.DateTime(0)
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime? @db.DateTime(0)
  returned_at DateTime? @db.DateTime(0)
  loan_id     Int
  item_id     Int
  with_bag    Boolean   @default(false)
  with_lock   Boolean   @default(false)
  item        Item      @relation(fields: [item_id], references: [id], map: "item_id_fk")
  loan        Loan      @relation(fields: [loan_id], references: [id], map: "loan_id_fk")

  @@index([item_id], map: "item_id")
  @@index([loan_id], map: "item_loan_id_fk_idx")
}

model Loan {
  id                   Int            @id @default(autoincrement())
  created_at           DateTime       @default(now()) @db.DateTime(0)
  updated_at           DateTime       @updatedAt
  deleted_at           DateTime?      @db.DateTime(0)
  date_of_return       DateTime?      @db.DateTime(0)
  location_of_use_id   Int?
  user_id              Int
  helpdesk_personel_id Int?
  selfservice_case_id  Int?
  recipient_type_id    Int?
  loan_length          Int?
  mail_sent            Boolean        @default(false)
  items_in_loan        ItemInLoan[]
  personnel            User?          @relation("loans_helpdesk_personel_idTousers", fields: [helpdesk_personel_id], references: [id], map: "helpdesk_personel_id_fk")
  zone                 Zone?          @relation(fields: [location_of_use_id], references: [id], map: "location_of_use_id_fk")
  recipient_type       RecipientType? @relation(fields: [recipient_type_id], references: [id], map: "recipient_type_id_fk")
  loaner               User           @relation("loans_user_idTousers", fields: [user_id], references: [id], map: "user_id_fk")

  @@index([helpdesk_personel_id], map: "helpdesk_personel_id")
  @@index([location_of_use_id], map: "location_of_use_id")
  @@index([recipient_type_id], map: "recipient_type_id")
  @@index([selfservice_case_id], map: "selfservice_case_id")
  @@index([user_id], map: "user_id")
}

model PickupLocation {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now()) @db.DateTime(0)
  updated_at DateTime  @updatedAt
  deleted_at DateTime? @db.DateTime(0)
  name       String    @db.VarChar(255)
}

model ProductStatus {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now()) @db.DateTime(0)
  updated_at DateTime  @updatedAt
  deleted_at DateTime? @db.DateTime(0)
  name       String    @db.VarChar(255)
  items      Item[]
}

model Product {
  id                Int       @id @default(autoincrement())
  created_at        DateTime  @default(now()) @db.DateTime(0)
  updated_at        DateTime  @updatedAt
  deleted_at        DateTime? @db.DateTime(0)
  name              String    @db.VarChar(255)
  brand_id          Int
  category_id       Int
  product_id_prefix String?   @db.VarChar(50)
  image_name        String?   @db.VarChar(50)
  items             Item[]
  category          Category  @relation(fields: [category_id], references: [id], map: "product_category_fk")
  brand             Brand     @relation(fields: [brand_id], references: [id], map: "products_brands_fk")

  @@index([brand_id], map: "brand_id")
  @@index([category_id], map: "products_ibfk_2")
}

model RecipientType {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now()) @db.DateTime(0)
  updated_at DateTime  @updatedAt
  deleted_at DateTime? @db.DateTime(0)
  name       String    @db.VarChar(255)
  loans      Loan[]
}

model StorageLocation {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now()) @db.DateTime(0)
  updated_at DateTime  @updatedAt
  deleted_at DateTime? @db.DateTime(0)
  zone_id    Int
  kabinet    String?   @db.VarChar(255)
  shelf      String?   @db.VarChar(255)
  idle_since DateTime? @default(now()) @db.DateTime(0)
  img_name   String?   @db.VarChar(255)
  items      Item[]

  @@index([zone_id], map: "zone_id")
}

model User {
  id            Int       @id @default(autoincrement())
  created_at    DateTime  @default(now()) @db.DateTime(0)
  updated_at    DateTime  @updatedAt
  deleted_at    DateTime? @db.DateTime(0)
  username      String    @db.VarChar(255)
  loans_managed Loan[]    @relation("loans_helpdesk_personel_idTousers")
  loans         Loan[]    @relation("loans_user_idTousers")
}

model Zone {
  id          Int       @id @default(autoincrement())
  created_at  DateTime  @default(now()) @db.DateTime(0)
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime? @db.DateTime(0)
  name        String    @db.VarChar(255)
  building_id Int
  floor_level Int
  loans       Loan[]
  building    Building  @relation(fields: [building_id], references: [id], map: "buildings_fk")

  @@index([building_id], map: "building_id")
}

model Feedback {
  id          Int       @id @default(autoincrement())
  created_at  DateTime  @default(now()) @db.DateTime(0)
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime? @db.DateTime(0)
  title       String    @db.VarChar(127)
  description String    @db.Text
}
